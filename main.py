import logging
import numpy as np
import random
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞, –º/—Å
h = 6.626e-34  # –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ü–ª–∞–Ω–∫–∞, –î–∂¬∑—Å

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7941068225:AAF1-ThSI8WLsRD-BjvIxkPM-2XJyBcUzHk'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_menu.add(KeyboardButton("‚ú® –§–ª—é–µ–Ω—Å"), KeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç"))
main_menu.add(KeyboardButton("üí• –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–∏—è"), KeyboardButton("üß≤ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è"))
main_menu.add(KeyboardButton("üìê –ü–ª–æ—Ç–Ω–æ—Å—Ç—å"), KeyboardButton("üöÄ –ò–º–ø—É–ª—å—Å"))
main_menu.add(KeyboardButton("üìï1 –§–∞–∫—Ç –æ —Ñ–∏–∑–∏–∫–µ"))
main_menu.add(KeyboardButton("‚ÑπÔ∏è Help"))

help_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
help_menu.add(KeyboardButton("‚ú® –§–ª—é–µ–Ω—Å"), KeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç"))
help_menu.add(KeyboardButton("üí• –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–∏—è"), KeyboardButton("üß≤ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è"))
help_menu.add(KeyboardButton("üìê –ü–ª–æ—Ç–Ω–æ—Å—Ç—å"), KeyboardButton("üöÄ –ò–º–ø—É–ª—å—Å"))
help_menu.add(KeyboardButton("üìï1 –§–∞–∫—Ç –æ —Ñ–∏–∑–∏–∫–µ"))

# –ö–ª–∞—Å—Å—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FluenceStates(StatesGroup):
    power = State()       # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –º–æ—â–Ω–æ—Å—Ç–∏
    diameter = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∏–∞–º–µ—Ç—Ä–∞

class ConvertStates(StatesGroup):
    convert_choice = State()   # –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    value_input = State()      # –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è

class EnergyStates(StatesGroup):
    mass = State()            # –æ–∂–∏–¥–∞–Ω–∏–µ –º–∞—Å—Å—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
    velocity = State()        # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    height = State()          # –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏

class DensityState(StatesGroup):
    mass = State()            # –æ–∂–∏–¥–∞–Ω–∏–µ –º–∞—Å—Å—ã –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    volume = State()          # –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏

class ImpulseState(StatesGroup):
    mass = State()            # –æ–∂–∏–¥–∞–Ω–∏–µ –º–∞—Å—Å—ã –¥–ª—è –∏–º–ø—É–ª—å—Å–∞
    velocity = State()        # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∏–º–ø—É–ª—å—Å–∞

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "üßê–Ø PhysiCalcBot. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ\n"
        "ü§©–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –Ø—Ä–æ—Å–ª–∞–≤ –ü–∞–Ω–æ–≤—Å–∫–∏–π –¥–ª—è SK Chalenge 2024\n"
        "üòé–°–º–æ—Ç—Ä–∏ —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚ú® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã, —á–∞—Å—Ç–æ—Ç—É –∏ —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞.\n"
        "‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ–∫—Ç—Ä—ã –∏ –≤—ã—á–∏—Å–ª—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∏–∫–∞ –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ.\n"
        "‚ú® –í—ã—á–∏—Å–ª—è—Ç—å —Ñ–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n"
        "‚ú® –í—ã—á–∏—Å–ª—è—Ç—å –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ –∏–º–ø—É–ª—å—Å.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚ÑπÔ∏è Help' –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.", reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Help
@dp.message_handler(lambda message: message.text.lower() == "‚ÑπÔ∏è help")
async def show_help(message: types.Message):
    await message.reply(
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n"
"‚ú® –§–ª—é–µ–Ω—Å - –ü–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –ª–∞–∑–µ—Ä–Ω–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø–ª–æ—â–∞–¥–∏. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∏—Å—Ö–æ–¥—è –∏–∑ –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥–∏ –æ–±–ª—É—á–µ–Ω–∏—è.\n"
"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≤–µ–ª–∏—á–∏–Ω: –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã, —á–∞—Å—Ç–æ—Ç–∞ –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–¥–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ.\n"
"üí• –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–∏—è - –†–∞—Å—á–µ—Ç –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏–º–µ–µ—Ç –æ–±—ä–µ–∫—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—é (–º–∞—Å—Å–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å).\n"
"üß≤ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏, —É–∫–∞–∑—ã–≤–∞—é—â–µ–π, —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞–ø–∞—Å–µ–Ω–æ –≤ —Ç–µ–ª–µ, –Ω–∞—Ö–æ–¥—è—â–µ–º—Å—è –≤ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–º –ø–æ–ª–µ.\n"
"üìê –ü–ª–æ—Ç–Ω–æ—Å—Ç—å - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—â–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Å—É –∏ –æ–±—ä–µ–º ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ—Å—Ç–≤–æ ¬´–ø–ª–æ—Ç–Ω–æ–µ¬ª.\n"
"üöÄ –ò–º–ø—É–ª—å—Å - –†–∞—Å—á–µ—Ç –∏–º–ø—É–ª—å—Å–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–∞—Å—Å–æ–π –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é, —Ç–æ –µ—Å—Ç—å ¬´–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏—è¬ª.\n"
, reply_markup=help_menu
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≤–µ–ª–∏—á–∏–Ω
def calculate_kinetic_energy(mass, velocity):
    return 0.5 * mass * velocity**2

def calculate_potential_energy(mass, height, g=9.81):
    return mass * g * height

def calculate_density(mass, volume):
    return mass / volume

def calculate_impulse(mass, velocity):
    return mass * velocity

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –§–ª—é–µ–Ω—Å
@dp.message_handler(lambda message: message.text.lower() == "‚ú® —Ñ–ª—é–µ–Ω—Å")
async def fluence_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –≤ –í–∞—Ç—Ç–∞—Ö:", reply_markup=ReplyKeyboardRemove())
    await FluenceStates.power.set()

@dp.message_handler(state=FluenceStates.power)
async def process_fluence_power(message: types.Message, state: FSMContext):
    try:
        power = float(message.text)
        await state.update_data(power=power)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –≤ –º–µ—Ç—Ä–∞—Ö:")
        await FluenceStates.diameter.set()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@dp.message_handler(state=FluenceStates.diameter)
async def process_fluence_diameter(message: types.Message, state: FSMContext):
    try:
        diameter = float(message.text)
        data = await state.get_data()
        power = data['power']

        fluence = power / (np.pi * (diameter / 2) ** 2)

        await message.reply(f"–§–ª—é–µ–Ω—Å: {fluence:.2f} –î–∂/–º¬≤", reply_markup=main_menu)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω–≤–µ—Ä—Ç
@dp.message_handler(lambda message: message.text.lower() == "üîÑ –∫–æ–Ω–≤–µ—Ä—Ç")
async def convert_start(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n1 - –î–ª–∏–Ω—É –≤–æ–ª–Ω—ã\n2 - –ß–∞—Å—Ç–æ—Ç—É\n3 - –≠–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    await ConvertStates.convert_choice.set()

@dp.message_handler(state=ConvertStates.convert_choice)
async def process_convert_choice(message: types.Message, state: FSMContext):
    choice = message.text
    if choice in ['1', '2', '3']:
        await state.update_data(choice=choice)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        await ConvertStates.value_input.set()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: 1, 2 –∏–ª–∏ 3.")

@dp.message_handler(state=ConvertStates.value_input)
async def process_convert_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    choice = data.get('choice')
    try:
        value = float(message.text)

        if choice == '1':  # –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã
            frequency = c / value
            await message.reply(f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:.2e} –ì—Ü", reply_markup=main_menu)
        elif choice == '2':  # –ß–∞—Å—Ç–æ—Ç–∞
            energy = h * value
            await message.reply(f"–≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞: {energy:.2e} –î–∂", reply_markup=main_menu)
        elif choice == '3':  # –≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞
            frequency = value / h
            await message.reply(f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:.2e} –ì—Ü", reply_markup=main_menu)

        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–∏—è
@dp.message_handler(lambda message: message.text.lower() == "üí• –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è")
async def kinetic_energy_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):", reply_markup=ReplyKeyboardRemove())
    await EnergyStates.mass.set()

@dp.message_handler(state=EnergyStates.mass)
async def process_kinetic_energy_mass(message: types.Message, state: FSMContext):
    try:
        mass = float(message.text)
        await state.update_data(mass=mass)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å):")
        await EnergyStates.velocity.set()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@dp.message_handler(state=EnergyStates.velocity)
async def process_kinetic_energy_velocity(message: types.Message, state: FSMContext):
    try:
        velocity = float(message.text)
        data = await state.get_data()
        mass = data['mass']

        energy = calculate_kinetic_energy(mass, velocity)

        await message.reply(f"–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è: {energy:.2f} –î–∂", reply_markup=main_menu)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è
@dp.message_handler(lambda message: message.text.lower() == "üß≤ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è")
async def potential_energy_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):", reply_markup=ReplyKeyboardRemove())
    await EnergyStates.mass.set()

@dp.message_handler(state=EnergyStates.mass)
async def process_potential_energy_mass(message: types.Message, state: FSMContext):
    try:
        mass = float(message.text)
        await state.update_data(mass=mass)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (–º):")
        await EnergyStates.height.set()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@dp.message_handler(state=EnergyStates.height)
async def process_potential_energy_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        data = await state.get_data()
        mass = data['mass']

        energy = calculate_potential_energy(mass, height)

        await message.reply(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: {energy:.2f} –î–∂", reply_markup=main_menu)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
@dp.message_handler(lambda message: message.text.lower() == "üìê –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
async def density_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):", reply_markup=ReplyKeyboardRemove())
    await DensityState.mass.set()

@dp.message_handler(state=DensityState.mass)
async def process_density_mass(message: types.Message, state: FSMContext):
    try:
        mass = float(message.text)
        await state.update_data(mass=mass)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º (–º¬≥):")
        await DensityState.volume.set()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@dp.message_handler(state=DensityState.volume)
async def process_density_volume(message: types.Message, state: FSMContext):
    try:
        volume = float(message.text)
        data = await state.get_data()
        mass = data['mass']

        density = calculate_density(mass, volume)

        await message.reply(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥", reply_markup=main_menu)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ò–º–ø—É–ª—å—Å
@dp.message_handler(lambda message: message.text.lower() == "üöÄ –∏–º–ø—É–ª—å—Å")
async def impulse_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):", reply_markup=ReplyKeyboardRemove())
    await ImpulseState.mass.set()

@dp.message_handler(state=ImpulseState.mass)
async def process_impulse_mass(message: types.Message, state: FSMContext):
    try:
        mass = float(message.text)
        await state.update_data(mass=mass)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å):")
        await ImpulseState.velocity.set()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@dp.message_handler(state=ImpulseState.velocity)
async def process_impulse_velocity(message: types.Message, state: FSMContext):
    try:
        velocity = float(message.text)
        data = await state.get_data()
        mass = data['mass']

        impulse = calculate_impulse(mass, velocity)

        await message.reply(f"–ò–º–ø—É–ª—å—Å: {impulse:.2f} –∫–≥¬∑–º/—Å", reply_markup=main_menu)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
def get_random_fact():
    with open('facts.doc', 'r', encoding='utf-8') as file:
        facts = file.readlines()
    return random.choice(facts).strip()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üìï–ï—â–µ 1 —Ñ–∞–∫—Ç" –∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(Text(equals="üìï1 –§–∞–∫—Ç –æ —Ñ–∏–∑–∏–∫–µ"))
async def send_fact(message: types.Message):
    fact = get_random_fact()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üìï–ï—â–µ 1 —Ñ–∞–∫—Ç" –∏ "üîô–ù–∞–∑–∞–¥"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add("üìï–ï—â–µ 1 —Ñ–∞–∫—Ç")
    keyboard.add("üîô–ù–∞–∑–∞–¥")

    await message.answer(fact, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìï–ï—â–µ 1 —Ñ–∞–∫—Ç"
@dp.message_handler(Text(equals="üìï–ï—â–µ 1 —Ñ–∞–∫—Ç"))
async def more_fact(message: types.Message):
    fact = get_random_fact()

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üìï–ï—â–µ 1 —Ñ–∞–∫—Ç" –∏ "üîô–ù–∞–∑–∞–¥"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add("üìï–ï—â–µ 1 —Ñ–∞–∫—Ç")
    keyboard.add( "üîô–ù–∞–∑–∞–¥")

    await message.answer(fact, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(Text(equals="üîô–ù–∞–∑–∞–¥"))
async def back_to_menu(message: types.Message):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    main_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    main_menu_keyboard.add(KeyboardButton("‚ú® –§–ª—é–µ–Ω—Å"), KeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç"))
    main_menu_keyboard.add(KeyboardButton("üí• –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–∏—è"), KeyboardButton("üß≤ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è"))
    main_menu_keyboard.add(KeyboardButton("üìê –ü–ª–æ—Ç–Ω–æ—Å—Ç—å"), KeyboardButton("üöÄ –ò–º–ø—É–ª—å—Å"))
    main_menu_keyboard.add(KeyboardButton("üìï1 –§–∞–∫—Ç –æ —Ñ–∏–∑–∏–∫–µ"))
    main_menu_keyboard.add(KeyboardButton("‚ÑπÔ∏è Help"))

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏ —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å —Ç–æ—á–∫–æ–π –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    fact = random.choice(facts).strip()
    fact = re.sub(r'^\d+\.\s*', '', fact)  # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏ —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)